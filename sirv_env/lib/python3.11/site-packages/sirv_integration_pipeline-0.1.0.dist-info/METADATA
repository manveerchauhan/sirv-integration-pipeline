Metadata-Version: 2.4
Name: sirv_integration_pipeline
Version: 0.1.0
Summary: A pipeline for integrating SIRV spike-in reads into single-cell RNA-seq datasets
Home-page: https://github.com/manveerchauhan/sirv-integration-pipeline
Author: Manveer Chauhan
Author-email: Manveer Chauhan <mschauhan@student.unimelb.edu.au>
Project-URL: Homepage, https://github.com/manveerchauhan/sirv-integration-pipeline
Project-URL: Bug Tracker, https://github.com/manveerchauhan/sirv-integration-pipeline/issues
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.20.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: pysam>=0.16.0
Requires-Dist: biopython>=1.78
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: jinja2>=3.0.0
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# SIRV Integration Pipeline

A pipeline for integrating SIRV (Spike-In RNA Variant) reads into single-cell RNA-seq datasets for benchmarking and quality control.

## Overview

The SIRV Integration Pipeline allows researchers to add SIRV spike-in reads to single-cell RNA sequencing datasets with realistic coverage bias. This enables more accurate benchmarking of scRNA-seq analysis tools and quality assessment of sequencing data.

![Pipeline Overview](pipeline_overview.png)

## Features

- **SIRV Integration**: Add SIRV reads to scRNA-seq datasets with controlled insertion rates
- **Coverage Bias Modeling**: Learn coverage bias patterns from real data and apply to integrated reads
- **Multi-source Input**: Support for BAM and FASTQ inputs
- **Resumable Processing**: Automatically resume from the last successful step if interrupted
- **Custom Coverage Models**: Learn coverage bias patterns from FLAMES output for more accurate modeling
- **Pipeline State Tracking**: Keep track of completed steps for easy resumption and monitoring

## Installation

### Prerequisites

- Python 3.8+
- Samtools
- Minimap2
- Pandas, NumPy, Matplotlib, and other Python dependencies

### Setup

1. Clone this repository:
   ```bash
   git clone <repository-url>
   cd sirv-integration-pipeline
   ```

2. Create a Python virtual environment:
   ```bash
   python -m venv sirv_env
   source sirv_env/bin/activate
   ```

3. Install the package:
   ```bash
   pip install -e .
   ```

## Usage

### Basic Usage

Run the pipeline with the provided scripts:

```bash
# Using the main entry point
python run_sirv_pipeline.py --integration \
    --output-dir /path/to/output \
    --sirv-bam /path/to/sirv.bam \
    --sirv-reference /path/to/reference.fa \
    --sirv-gtf /path/to/annotation.gtf \
    --visualize-coverage \
    --verbose

# Or run as a Python module
python -m sirv_pipeline --integration \
    --output-dir /path/to/output \
    --sirv-bam /path/to/sirv.bam \
    --sirv-reference /path/to/reference.fa \
    --sirv-gtf /path/to/annotation.gtf
```

### Using FLAMES Output for Coverage Modeling

To use FLAMES output for more accurate coverage modeling:

```bash
python run_sirv_pipeline.py --integration \
    --output-dir /path/to/output \
    --sirv-bam /path/to/sirv.bam \
    --sirv-reference /path/to/reference.fa \
    --sirv-gtf /path/to/annotation.gtf \
    --learn-coverage-from /path/to/flames/realign2transcript.bam \
    --flames-gtf /path/to/flames/isoform_annotated.gtf \
    --coverage-model custom \
    --min-reads 50 \
    --length-bins 5 \
    --visualize-coverage
```

### Resuming Pipeline Execution

Use the `resume_pipeline.sh` script to easily resume a failed or interrupted pipeline run:

```bash
# Resume from the last successful step
./resume_pipeline.sh /path/to/output_dir

# Restart the pipeline from the beginning
./resume_pipeline.sh -r /path/to/output_dir

# Force rerun all steps and submit as SLURM job
./resume_pipeline.sh -f -s /path/to/output_dir

# Use settings from a previous job with a new output directory
./resume_pipeline.sh -j 12345 /path/to/new_output_dir
```

### Running on SLURM

Submit as a SLURM job:

```bash
sbatch sirv_integration_pipeline.slurm
```

Or use the resume script with the `-s` flag:

```bash
./resume_pipeline.sh -s /path/to/output_dir
```

## Pipeline Workflow

1. **Prepare SIRV Reference**: Index and prepare SIRV reference files
2. **Process SIRV Reads**: Process SIRV BAM or FASTQ files
3. **Learn Coverage Bias**: Model coverage bias from FLAMES or other data
4. **Integrate SIRV Reads**: Add SIRV reads to scRNA-seq dataset with modeled coverage bias
5. **Generate Reports**: Create visualizations and reports

## Advanced Options

```
Usage: python run_sirv_pipeline.py [options]

Mode Selection:
  --integration          Run in integration mode to add SIRV reads to scRNA-seq dataset
  --evaluation           Run in evaluation mode to compare with FLAMES output

Integration Mode:
  --sirv-fastq SIRV_FASTQ
                        Path to SIRV FASTQ file
  --sirv-bam SIRV_BAM [SIRV_BAM ...]
                        Path to SIRV BAM file(s) (can specify multiple files)
  --sirv-reference SIRV_REFERENCE
                        Path to SIRV reference FASTA file
  --sirv-gtf SIRV_GTF   Path to SIRV GTF annotation file (optional - will be auto-generated if not provided)
  --sc-fastq SC_FASTQ   Path to single-cell FASTQ file
  --insertion-rate INSERTION_RATE
                        SIRV insertion rate (0-1, default: 0.1)

Coverage Bias Modeling:
  --coverage-model {10x_cdna,direct_rna,custom,default}
                        Type of coverage bias model to use (default: 10x_cdna)
  --learn-coverage-from LEARN_COVERAGE_FROM
                        Learn coverage bias from BAM file
  --flames-gtf FLAMES_GTF
                        FLAMES GTF annotation file to use with the FLAMES BAM for coverage modeling
  --visualize-coverage  Generate coverage bias visualizations
  --min-reads MIN_READS
                        Minimum reads required for bias learning (default: 100)
  --length-bins LENGTH_BINS
                        Number of transcript length bins (default: 5)
  --disable-coverage-bias
                        Disable coverage bias modeling

Common Settings:
  --output-dir OUTPUT_DIR
                        Path to output directory (default: ./output)
  --threads THREADS     Number of threads for parallel processing (default: 8)
  --seed SEED           Random seed for reproducibility
  --verbose             Enable verbose logging
```

## Output Files

- `pipeline_state.json`: Current state of the pipeline execution
- `sirv_alignment.bam`: Processed SIRV alignment
- `transcript_map.csv`: Mapping of SIRV transcripts
- `coverage_model.pkl`: Learned coverage bias model
- `integrated_reads.fastq`: Final integrated reads (when using scRNA-seq input)
- `plots/`: Coverage bias and other visualizations
- `pipeline.log`: Detailed execution log

## Troubleshooting

If you encounter issues:

1. Check the log file in your output directory: `pipeline.log`
2. Ensure all input files exist and are properly formatted
3. For SLURM jobs, check the job output files: `sirv_integration_JOBID.out` and `sirv_integration_JOBID.err`
4. Try running with the `--verbose` flag for more detailed logging

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## References

For more information on SIRV spike-ins, visit [Lexogen's SIRV website](https://www.lexogen.com/sirvs/).
