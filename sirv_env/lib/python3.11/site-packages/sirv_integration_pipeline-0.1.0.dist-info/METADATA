Metadata-Version: 2.4
Name: sirv_integration_pipeline
Version: 0.1.0
Summary: A pipeline for integrating SIRV spike-in reads into single-cell RNA-seq datasets
Home-page: https://github.com/manveerchauhan/sirv-integration-pipeline
Author: Manveer Chauhan
Author-email: Manveer Chauhan <mschauhan@student.unimelb.edu.au>
Project-URL: Homepage, https://github.com/manveerchauhan/sirv-integration-pipeline
Project-URL: Bug Tracker, https://github.com/manveerchauhan/sirv-integration-pipeline/issues
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.20.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: pysam>=0.16.0
Requires-Dist: biopython>=1.78
Requires-Dist: matplotlib>=3.5.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: jinja2>=3.0.0
Dynamic: author
Dynamic: home-page
Dynamic: requires-python

# SIRV Integration Pipeline for Long-Read scRNA-seq

A pipeline for integrating SIRV spike-in reads into existing scRNA-seq datasets to benchmark isoform discovery tools.

## Overview

This pipeline creates semi-synthetic benchmarking datasets by adding SIRV (Spike-In RNA Variant) reads to existing single-cell RNA-seq data. It provides ground truth for evaluating transcript discovery and quantification tools like FLAMES.

## Pipeline Schematic

```mermaid
flowchart TD
    %% Input files
    SIRV["SIRV Reads (FASTQ/BAM)"] 
    SC["scRNA-seq Reads (FASTQ)"]
    
    %% Processing steps - left branch
    SIRV --> MAP["Map to SIRV Reference"]
    MAP --> TRANS["Transcript Assignment"]
    
    %% Processing steps - right branch
    SC --> CELL["Extract Cell Barcodes & UMIs"]
    CELL --> COV["Model Coverage Bias"]
    
    %% Integration
    TRANS --> INT["Integrate SIRV Reads with Cell Barcodes & UMIs"]
    COV --> INT
    
    %% Output
    INT --> COMB["Combined FASTQ with Ground Truth Tracking"]
    
    %% Evaluation (optional)
    COMB --> EVAL["Evaluate with FLAMES (Optional)"]
    EVAL --> REPORT["Generate Evaluation Reports & Visualizations"]
    
    %% Style nodes by type
    style SIRV fill:#8DD3C7,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style SC fill:#8DD3C7,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style MAP fill:#BEBADA,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style TRANS fill:#BEBADA,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style CELL fill:#BEBADA,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style COV fill:#BEBADA,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style INT fill:#BEBADA,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style EVAL fill:#BEBADA,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style COMB fill:#FB8072,stroke:#333,stroke-width:2px,color:black,font-weight:bold
    style REPORT fill:#FB8072,stroke:#333,stroke-width:2px,color:black,font-weight:bold
```

## Key Features

- Maps SIRV reads to reference to identify transcripts of origin
- Adds cell barcodes and UMIs to SIRV reads for single-cell analysis
- Models read length distributions and 5'-3' coverage bias
- Supports sophisticated coverage bias modeling for different sequencing technologies
- Generates tracking information for benchmarking
- Supports both FASTQ and BAM files as SIRV input

## Installation

```bash
git clone https://github.com/manveerchauhan/sirv-integration-pipeline.git
cd sirv-integration-pipeline
pip install .
```

Dependencies: Python 3.7+, numpy, pandas, matplotlib, seaborn, jinja2, minimap2, samtools, scipy, gffutils, pysam

## Usage

### Basic Integration

```bash
sirv-pipeline --integration \
    --sirv-fastq sirv_reads.fastq \
    --sc-fastq scRNA_data.fastq \
    --sirv-reference sirv_genome.fa \
    --sirv-gtf sirv_annotation.gtf \
    --output-dir ./output \
    --insertion-rate 0.01
```

### With Coverage Bias Modeling

```bash
sirv-pipeline --integration \
    --sirv-fastq sirv_reads.fastq \
    --sc-fastq scRNA_data.fastq \
    --sirv-reference sirv_genome.fa \
    --sirv-gtf sirv_annotation.gtf \
    --coverage-model 10x_cdna \
    --visualize-coverage \
    --output-dir ./output
```

### Learning Coverage Bias from Data

```bash
sirv-pipeline --integration \
    --sirv-fastq sirv_reads.fastq \
    --sc-fastq scRNA_data.fastq \
    --sirv-reference sirv_genome.fa \
    --sirv-gtf sirv_annotation.gtf \
    --learn-coverage-from aligned_reads.bam \
    --min-reads 100 \
    --length-bins 5 \
    --visualize-coverage \
    --output-dir ./output
```

### With Combined References

```bash
sirv-pipeline --integration \
    --sirv-fastq sirv_reads.fastq \
    --sc-fastq scRNA_data.fastq \
    --sirv-reference sirv_genome.fa \
    --sirv-gtf sirv_annotation.gtf \
    --non-sirv-reference genome.fa \
    --create-combined-reference \
    --output-dir ./output
```

### Using BAM Input

```bash
sirv-pipeline --integration \
    --sirv-bam sirv_reads.bam \
    --sc-fastq scRNA_data.fastq \
    --sirv-reference sirv_genome.fa \
    --sirv-gtf sirv_annotation.gtf \
    --output-dir ./output
```

### Evaluation Mode

```bash
sirv-pipeline --evaluation \
    --expected-file ./output/tracking.csv \
    --flames-output flames_counts.csv \
    --output-dir ./evaluation
```

## Output Files

### Integration Mode
- `integrated.fastq`: FASTQ with SIRV reads added to scRNA-seq data
- `transcript_map.csv`: Mapping of SIRV reads to transcripts
- `coverage_model.json`: Serialized coverage bias model
- `coverage_bias.png`: Visualization of coverage bias distributions
- `tracking.csv`: Tracking information for inserted reads

### Evaluation Mode
- `comparison.csv`: Expected vs. observed SIRV counts
- `plots/`: Evaluation plots (correlation, detection rate, transcript detection)
- `report.html`: Summary report
- `diagnostics/`: Additional visualizations

## Advanced Options

| Option | Description | Default |
|--------|-------------|---------|
| `--output-dir DIR` | Output directory | `./output` |
| `--insertion-rate FLOAT` | SIRV insertion rate (0-1) | `0.01` |
| `--threads INT` | Number of threads | `8` |
| `--non-sirv-reference FILE` | Path to genome reference | None |
| `--create-combined-reference` | Create combined reference | False |
| `--coverage-model TYPE` | Coverage bias model type | `10x_cdna` |
| `--learn-coverage-from BAM` | Learn bias from BAM file | None |
| `--min-reads INT` | Min reads for bias learning | `100` |
| `--length-bins INT` | Transcript length bins | `5` |
| `--visualize-coverage` | Generate bias visualizations | False |
| `--disable-coverage-bias` | Disable bias modeling | False |
| `--seed INT` | Random seed | None |
| `--verbose` | Enable verbose logging | False |

## Coverage Bias Models

The pipeline includes sophisticated coverage bias modeling to accurately represent the non-uniform distribution of reads across transcripts:

### Predefined Models

- **10x_cdna**: Models the 3' bias typical in 10X Chromium cDNA libraries
- **direct_rna**: Models the 5' bias typically seen in direct RNA sequencing
- **custom**: Custom bias pattern that can be learned from existing data

### Learning from Data

The coverage bias model can be trained on your own BAM files to capture technology-specific biases:

```bash
sirv-pipeline --integration \
    --learn-coverage-from aligned_reads.bam \
    --length-bins 5 \
    --min-reads 100 \
    --visualize-coverage
```

## Development

### Running Tests

The repository includes a comprehensive test script:

```bash
# Run the complete test (integration + evaluation)
python run_complete_test.py
```

This script will:
1. Generate synthetic SIRV and scRNA-seq data in the `test_data/` directory
2. Run the integration pipeline
3. Simulate FLAMES output
4. Generate evaluation reports and visualizations

### HPC Usage

For large datasets, use the provided SLURM script:

```bash
sbatch sirv_integration_pipeline.slurm
```

Modify the script parameters in the header section as needed.

## Contact

Questions or suggestions: mschauhan@student.unimelb.edu.au
